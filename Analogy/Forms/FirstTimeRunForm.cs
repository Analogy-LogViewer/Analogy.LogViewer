using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using Analogy.DataTypes;
using DevExpress.XtraEditors.Controls;

namespace Analogy.Forms
{
    public partial class FirstTimeRunForm : DevExpress.XtraEditors.XtraForm
    {
        private UserSettingsManager Settings { get; } = UserSettingsManager.UserSettings;

        public List<FactoryCheckItem> Factories { get; set; } = new List<FactoryCheckItem>();
        public FirstTimeRunForm()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Uncomment next line to set the total number of data records stored within your source
            // unboundSource1.SetRowCount(42);
            // This line of code is generated by Data Source Configuration Wizard
        }

        private void FirstTimeRunForm_Load(object sender, EventArgs e)
        {
            if (DesignMode)
            {
                return;
            }

            Icon = UserSettingsManager.UserSettings.GetIcon();
            foreach (var setting in Settings.FactoriesOrder)
            {
                FactorySettings factory = Settings.GetFactorySetting(setting);
                if (factory == null)
                {
                    continue;
                }

                var factoryContainer = FactoriesManager.Instance.FactoryContainer(factory.FactoryId);
                string about = (factoryContainer?.Factory != null) ? factoryContainer.Factory.About : "Disabled";
                var image = FactoriesManager.Instance.GetLargeImage(factory.FactoryId);
                FactoryCheckItem itm = new FactoryCheckItem(factory.FactoryName, factory.FactoryId, about, image);
                chkLstDataProviderStatus.Items.Add(itm, factory.Status == DataProviderFactoryStatus.Enabled);
            }
            //add missing:
            foreach (var factory in Settings.FactoriesSettings.Where(itm => !Settings.FactoriesOrder.Contains(itm.FactoryId)))
            {
                var factoryContainer = FactoriesManager.Instance.FactoryContainer(factory.FactoryId);
                string about = (factoryContainer?.Factory != null) ? factoryContainer.Factory.About : "Disabled";
                var image = FactoriesManager.Instance.GetLargeImage(factory.FactoryId);
                FactoryCheckItem itm = new FactoryCheckItem(factory.FactoryName, factory.FactoryId, about, image);
                chkLstDataProviderStatus.Items.Add(itm, factory.Status != DataProviderFactoryStatus.Disabled);
            }
        }

        private void SetNext(object sender, EventArgs e) => SetNextTab(int.Parse((sender as SimpleButton).Tag.ToString()));
        private void SetBack(object sender, EventArgs e) => SetBackTab(int.Parse((sender as SimpleButton).Tag.ToString()));

        private void SetNextTab(int current) => xtraTabControl1.SelectedTabPageIndex = current + 1;
        private void SetBackTab(int current) => xtraTabControl1.SelectedTabPageIndex = current - 1;

        private void AcceptAndClose(object sender, EventArgs e)
        {
            Close();
        }

        private void SaveSettings()
        {
            List<Guid> order = new List<Guid>(chkLstDataProviderStatus.Items.Count);
            foreach (CheckedListBoxItem item in chkLstDataProviderStatus.Items)
            {
                FactoryCheckItem fci = (FactoryCheckItem)item.Value;
                order.Add(fci.ID);
                var guid = fci.ID;
                var factory = Settings.FactoriesSettings.SingleOrDefault(f => f.FactoryId == guid);
                if (factory != null)
                {
                    factory.Status = item.CheckState == CheckState.Checked
                        ? DataProviderFactoryStatus.Enabled
                        : DataProviderFactoryStatus.Disabled;
                }
            }
        }

        private void chkLstDataProviderStatus_ItemCheck(object sender, DevExpress.XtraEditors.Controls.ItemCheckEventArgs e)
        {
            SaveSettings();
        }
    }
}